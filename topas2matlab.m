function [DoseMatrix,UncMatrix] = TOPASto3DMatrix(filename, GridType)
% TOPASto3DMatrix converts TOPAS .csv data to a 3D Matrix.
% The following variables are required for proper execution: 
%   varargin{1}: filename of the .csv TOPAS output file
%   varargin{2}: structure containing the dose grid dimensions. Example: 
%                   DoseGrid.Xbins = 50;
%                   DoseGrid.Ybins = 50;
%                   DoseGrid.Zbins = 60;
%   varargin{3}: vector containing the rows of the TOPAS file to import 
%   into the 3D array. The default is [9, Inf].
%% Input handling
% If dataLines is not specified, define defaults
if nargin < 3
    dataLines = [9, Inf];
end
% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 5);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["TOPASVersion32", "VarName2", "VarName3", "VarName4", "VarName5"];
opts.VariableTypes = ["double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

%% Import the data
Dij = readtable(filename, opts);

% Convert to output type
Dij = table2array(Dij);
Dij = sortrows(Dij,3);
if GridType == 'Rectilinear'
Dims = GetRectilinearDims(filename);
DoseMatrix = zeros(Dims(1),Dims(2),Dims(3));
UncMatrix = DoseMatrix;
inds = [1:1:numel(Dij(:,1))]';
DoseMatrix(inds) = Dij(inds,4);
UncMatrix(inds) = Dij(inds,5);
elseif GridType == 'Cylindrical'
    Dims = GetCylindricalDims(filename);
    DoseMatrix = zeros(1,Dims);
    DoseMatrix(:) = Dij(:,4);
    UncMatrix(:) = Dij(:,5);
end


function Beamlet11 = GetRectilinearDims(filename, dataLines)
%IMPORTFILE Import data from a text file
%  BEAMLET11 = IMPORTFILE(FILENAME) reads data from text file FILENAME
%  for the default selection.  Returns the numeric data.
%
%  BEAMLET11 = IMPORTFILE(FILE, DATALINES) reads data for the specified
%  row interval(s) of text file FILENAME. Specify DATALINES as a
%  positive scalar integer or a N-by-2 array of positive scalar integers
%  for dis-contiguous row intervals.
%
%  Example:
%  Beamlet11 = importfile("C:\Users\Nicholas Nelson\OneDrive - UW-Madison\Graduate School\Research\DCS Project\Monte Carlo\GRID Simulations\Spot Maps\GRIDbeamlets\Beamlet1_1.csv", [5, 7]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 14-Oct-2021 16:16:13

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [5, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 5);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = " ";

% Specify column names and types
opts.VariableNames = ["Var1", "Var2", "Var3", "p1", "Var5"];
opts.SelectedVariableNames = "p1";
opts.VariableTypes = ["string", "string", "string", "double", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.LeadingDelimitersRule = "ignore";

% Specify variable properties
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var5"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var5"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, "p1", "TrimNonNumeric", true);
opts = setvaropts(opts, "p1", "DecimalSeparator", ",");
opts = setvaropts(opts, "p1", "ThousandsSeparator", ".");

% Import the data
Beamlet11 = readtable(filename, opts);

%% Convert to output type
Beamlet11 = table2array(Beamlet11);
end
function D = GetCylindricalDims(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   PDD = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   PDD = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   PDD = importfile('PDD.csv', 7, 7);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/10/15 13:37:24

%% Initialize variables.
delimiter = {',',' '};
if nargin<=2
    startRow = 7;
    endRow = 7;
end

%% Format for each line of text:
%   column4: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    dataArray{1} = [dataArray{1};dataArrayBlock{1}];
end
%% Close the text file.
fclose(fileID);
D = [dataArray{1:end-1}];
D = str2double(D);
end
end
